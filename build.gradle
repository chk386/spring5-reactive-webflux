buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.avast.gradle:gradle-docker-compose-plugin:0.7.1"

	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker-compose'

group = 'com.nhnent'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 9

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile('org.springframework.boot:spring-boot-starter-data-redis-reactive')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-freemarker')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-websocket') {
		exclude group: 'org.apache.tomcat.embed'
	}

	runtime('org.springframework.boot:spring-boot-devtools')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}

[test, build, bootRun].each { Task t ->
	t.shouldRunAfter clean, assemble, ":composeUp"
	t.dependsOn ":composeUp"
	t.finalizedBy ":composeDown"
}

dockerCompose {
	useComposeFiles = ['./docker/docker-compose.yml']
}

